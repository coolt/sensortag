//------------------------------------------------------------------------------
// TI Confidential - NDA Restrictions
//
// Copyright (c) 2013 Texas Instruments, Inc.
//
//    This is an unpublished work created in the year stated above.
//    Texas Instruments owns all rights in and to this work and
//    intends to maintain and protect it as an unpublished copyright.
//    In the event of either inadvertent or deliberate publication,
//    the above stated date shall be treated as the year of first
//    publication. In the event of such publication, Texas Instruments
//    intends to enforce its rights in the work under the copyright
//    laws as a published work.
//
//------------------------------------------------------------------------------
///
/// \file            hs_cmd.h
/// \brief           Definitions of API for high-speed mode commands
///
///                  This file is generated by create_command.pl
///
/// \author          Low Power RF Wireless Business Unit
///                  Helge Coward (h.coward@ti.com)
///
/// \date            Mon Nov  4 15:49:22 CET 2013
///
//------------------------------------------------------------------------------

#ifndef __HS_CMD_H
#define __HS_CMD_H

#include <stdint.h>
#include "mailbox.h"

#define CMD_HS_TX                                               0x3841
#define _POSITION_CMD_HS_TX_pktConf                             14
#define _TYPE_CMD_HS_TX_pktConf                                 uint8_t
#define _BITPOS_CMD_HS_TX_pktConf_bFsOff                        0
#define _NBITS_CMD_HS_TX_pktConf_bFsOff                         1
#define _BITPOS_CMD_HS_TX_pktConf_bUseCrc                       1
#define _NBITS_CMD_HS_TX_pktConf_bUseCrc                        1
#define _BITPOS_CMD_HS_TX_pktConf_bVarLen                       2
#define _NBITS_CMD_HS_TX_pktConf_bVarLen                        1
#define _BITPOS_CMD_HS_TX_pktConf_bCheckQAtEnd                  3
#define _NBITS_CMD_HS_TX_pktConf_bCheckQAtEnd                   1
#define _POSITION_CMD_HS_TX_pQueue                              16
#define _TYPE_CMD_HS_TX_pQueue                                  dataQueue_t*
#define _LAST_POSITION_CMD_HS_TX                                16
#define _LAST_TYPE_CMD_HS_TX                                    dataQueue_t*

typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t bUseCrc:1;
      uint8_t bVarLen:1;
      uint8_t bCheckQAtEnd:1;
   } pktConf;
   uint8_t __dummy0;
   dataQueue_t* pQueue;
} rfCoreHal_CMD_HS_TX_t;

#define CMD_HS_RX                                               0x3842
#define _POSITION_CMD_HS_RX_pktConf                             14
#define _TYPE_CMD_HS_RX_pktConf                                 uint8_t
#define _BITPOS_CMD_HS_RX_pktConf_bFsOff                        0
#define _NBITS_CMD_HS_RX_pktConf_bFsOff                         1
#define _BITPOS_CMD_HS_RX_pktConf_bUseCrc                       1
#define _NBITS_CMD_HS_RX_pktConf_bUseCrc                        1
#define _BITPOS_CMD_HS_RX_pktConf_bVarLen                       2
#define _NBITS_CMD_HS_RX_pktConf_bVarLen                        1
#define _BITPOS_CMD_HS_RX_pktConf_bRepeatOk                     3
#define _NBITS_CMD_HS_RX_pktConf_bRepeatOk                      1
#define _BITPOS_CMD_HS_RX_pktConf_bRepeatNok                    4
#define _NBITS_CMD_HS_RX_pktConf_bRepeatNok                     1
#define _BITPOS_CMD_HS_RX_pktConf_addressMode                   5
#define _NBITS_CMD_HS_RX_pktConf_addressMode                    2
#define _POSITION_CMD_HS_RX_rxConf                              15
#define _TYPE_CMD_HS_RX_rxConf                                  uint8_t
#define _BITPOS_CMD_HS_RX_rxConf_bAutoFlushCrcErr               0
#define _NBITS_CMD_HS_RX_rxConf_bAutoFlushCrcErr                1
#define _BITPOS_CMD_HS_RX_rxConf_bIncludeLen                    1
#define _NBITS_CMD_HS_RX_rxConf_bIncludeLen                     1
#define _BITPOS_CMD_HS_RX_rxConf_bIncludeCrc                    2
#define _NBITS_CMD_HS_RX_rxConf_bIncludeCrc                     1
#define _BITPOS_CMD_HS_RX_rxConf_bAppendStatus                  3
#define _NBITS_CMD_HS_RX_rxConf_bAppendStatus                   1
#define _BITPOS_CMD_HS_RX_rxConf_bAppendTimestamp               4
#define _NBITS_CMD_HS_RX_rxConf_bAppendTimestamp                1
#define _POSITION_CMD_HS_RX_maxPktLen                           16
#define _TYPE_CMD_HS_RX_maxPktLen                               uint16_t
#define _POSITION_CMD_HS_RX_address0                            18
#define _TYPE_CMD_HS_RX_address0                                uint16_t
#define _POSITION_CMD_HS_RX_address1                            20
#define _TYPE_CMD_HS_RX_address1                                uint16_t
#define _POSITION_CMD_HS_RX_endTrigger                          23
#define _TYPE_CMD_HS_RX_endTrigger                              uint8_t
#define _BITPOS_CMD_HS_RX_endTrigger_triggerType                0
#define _NBITS_CMD_HS_RX_endTrigger_triggerType                 4
#define _BITPOS_CMD_HS_RX_endTrigger_bEnaCmd                    4
#define _NBITS_CMD_HS_RX_endTrigger_bEnaCmd                     1
#define _BITPOS_CMD_HS_RX_endTrigger_triggerNo                  5
#define _NBITS_CMD_HS_RX_endTrigger_triggerNo                   2
#define _BITPOS_CMD_HS_RX_endTrigger_pastTrig                   7
#define _NBITS_CMD_HS_RX_endTrigger_pastTrig                    1
#define _POSITION_CMD_HS_RX_endTime                             24
#define _TYPE_CMD_HS_RX_endTime                                 ratmr_t
#define _POSITION_CMD_HS_RX_pQueue                              28
#define _TYPE_CMD_HS_RX_pQueue                                  dataQueue_t*
#define _POSITION_CMD_HS_RX_pOutput                             32
#define _TYPE_CMD_HS_RX_pOutput                                 uint8_t*
#define _LAST_POSITION_CMD_HS_RX                                32
#define _LAST_TYPE_CMD_HS_RX                                    uint8_t*

typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t bUseCrc:1;
      uint8_t bVarLen:1;
      uint8_t bRepeatOk:1;
      uint8_t bRepeatNok:1;
      uint8_t addressMode:2;
   } pktConf;
   struct {
      uint8_t bAutoFlushCrcErr:1;
      uint8_t bIncludeLen:1;
      uint8_t bIncludeCrc:1;
      uint8_t bAppendStatus:1;
      uint8_t bAppendTimestamp:1;
   } rxConf;
   uint16_t maxPktLen;
   uint16_t address0;
   uint16_t address1;
   uint8_t __dummy0;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } endTrigger;
   ratmr_t endTime;
   dataQueue_t* pQueue;
   uint8_t* pOutput;
} rfCoreHal_CMD_HS_RX_t;

#define _POSITION_hsRxOutput_nRxOk                              0
#define _TYPE_hsRxOutput_nRxOk                                  uint16_t
#define _POSITION_hsRxOutput_nRxNok                             2
#define _TYPE_hsRxOutput_nRxNok                                 uint16_t
#define _POSITION_hsRxOutput_nRxAborted                         4
#define _TYPE_hsRxOutput_nRxAborted                             uint16_t
#define _POSITION_hsRxOutput_nRxBufFull                         6
#define _TYPE_hsRxOutput_nRxBufFull                             uint8_t
#define _POSITION_hsRxOutput_lastRssi                           7
#define _TYPE_hsRxOutput_lastRssi                               int8_t
#define _POSITION_hsRxOutput_timeStamp                          8
#define _TYPE_hsRxOutput_timeStamp                              ratmr_t
#define _LAST_POSITION_hsRxOutput                               8
#define _LAST_TYPE_hsRxOutput                                   ratmr_t

typedef struct {
   uint16_t nRxOk;
   uint16_t nRxNok;
   uint16_t nRxAborted;
   uint8_t nRxBufFull;
   int8_t lastRssi;
   ratmr_t timeStamp;
} rfCoreHal_hsRxOutput_t;

#define _POSITION_hsRxStatus_status                             0
#define _TYPE_hsRxStatus_status                                 uint16_t
#define _BITPOS_hsRxStatus_status_rssi                          0
#define _NBITS_hsRxStatus_status_rssi                           8
#define _BITPOS_hsRxStatus_status_bCrcErr                       8
#define _NBITS_hsRxStatus_status_bCrcErr                        1
#define _BITPOS_hsRxStatus_status_addressInd                    9
#define _NBITS_hsRxStatus_status_addressInd                     2
#define _LAST_POSITION_hsRxStatus                               0
#define _LAST_TYPE_hsRxStatus                                   uint16_t

typedef struct {
   struct {
      uint16_t rssi:8;
      uint16_t bCrcErr:1;
      uint16_t addressInd:2;
   } status;
} rfCoreHal_hsRxStatus_t;

#endif
