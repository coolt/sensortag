//------------------------------------------------------------------------------
// TI Confidential - NDA Restrictions
//
// Copyright (c) 2013 Texas Instruments, Inc.
//
//    This is an unpublished work created in the year stated above.
//    Texas Instruments owns all rights in and to this work and
//    intends to maintain and protect it as an unpublished copyright.
//    In the event of either inadvertent or deliberate publication,
//    the above stated date shall be treated as the year of first
//    publication. In the event of such publication, Texas Instruments
//    intends to enforce its rights in the work under the copyright
//    laws as a published work.
//
//------------------------------------------------------------------------------
///
/// \file            ant_cmd.h
/// \brief           Definitions of API for ANT mode commands
///
///                  This file is generated by create_command.pl
///
/// \author          Low Power RF Wireless Business Unit
///                  Helge Coward (h.coward@ti.com)
///
/// \date            Wed Dec  4 10:41:21 CET 2013
///
//------------------------------------------------------------------------------

#ifndef __ANT_CMD_H
#define __ANT_CMD_H

#include <stdint.h>
#include "mailbox.h"

#define CMD_ANT_TX                                              0x4801
#define _POSITION_CMD_ANT_TX_pktConf                            14
#define _TYPE_CMD_ANT_TX_pktConf                                uint8_t
#define _BITPOS_CMD_ANT_TX_pktConf_bFsOff                       0
#define _NBITS_CMD_ANT_TX_pktConf_bFsOff                        1
#define _BITPOS_CMD_ANT_TX_pktConf_bWhiten                      1
#define _NBITS_CMD_ANT_TX_pktConf_bWhiten                       1
#define _POSITION_CMD_ANT_TX_pktLen                             15
#define _TYPE_CMD_ANT_TX_pktLen                                 uint8_t
#define _POSITION_CMD_ANT_TX_pPkt                               16
#define _TYPE_CMD_ANT_TX_pPkt                                   uint8_t*
#define _POSITION_CMD_ANT_TX_networkAddr                        20
#define _TYPE_CMD_ANT_TX_networkAddr                            uint16_t
#define _LAST_POSITION_CMD_ANT_TX                               20
#define _LAST_TYPE_CMD_ANT_TX                                   uint16_t

typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t bWhiten:1;
   } pktConf;
   uint8_t pktLen;
   uint8_t* pPkt;
   uint16_t networkAddr;
} rfCoreHal_CMD_ANT_TX_t;

#define CMD_ANT_RX                                              0x4802
#define _POSITION_CMD_ANT_RX_pktConf                            14
#define _TYPE_CMD_ANT_RX_pktConf                                uint8_t
#define _BITPOS_CMD_ANT_RX_pktConf_bFsOff                       0
#define _NBITS_CMD_ANT_RX_pktConf_bFsOff                        1
#define _BITPOS_CMD_ANT_RX_pktConf_bWhiten                      1
#define _NBITS_CMD_ANT_RX_pktConf_bWhiten                       1
#define _BITPOS_CMD_ANT_RX_pktConf_bRepeatOk                    2
#define _NBITS_CMD_ANT_RX_pktConf_bRepeatOk                     1
#define _BITPOS_CMD_ANT_RX_pktConf_bRepeatNok                   3
#define _NBITS_CMD_ANT_RX_pktConf_bRepeatNok                    1
#define _BITPOS_CMD_ANT_RX_pktConf_networkAddrMode              4
#define _NBITS_CMD_ANT_RX_pktConf_networkAddrMode               2
#define _BITPOS_CMD_ANT_RX_pktConf_bCheckDeviceAddr             6
#define _NBITS_CMD_ANT_RX_pktConf_bCheckDeviceAddr              1
#define _POSITION_CMD_ANT_RX_rxConf                             15
#define _TYPE_CMD_ANT_RX_rxConf                                 uint8_t
#define _BITPOS_CMD_ANT_RX_rxConf_bAutoFlushCrcErr              0
#define _NBITS_CMD_ANT_RX_rxConf_bAutoFlushCrcErr               1
#define _BITPOS_CMD_ANT_RX_rxConf_bIncludeNetwAddr              1
#define _NBITS_CMD_ANT_RX_rxConf_bIncludeNetwAddr               1
#define _BITPOS_CMD_ANT_RX_rxConf_bIncludeCrc                   2
#define _NBITS_CMD_ANT_RX_rxConf_bIncludeCrc                    1
#define _BITPOS_CMD_ANT_RX_rxConf_bAppendRssi                   3
#define _NBITS_CMD_ANT_RX_rxConf_bAppendRssi                    1
#define _BITPOS_CMD_ANT_RX_rxConf_bAppendStatus                 4
#define _NBITS_CMD_ANT_RX_rxConf_bAppendStatus                  1
#define _BITPOS_CMD_ANT_RX_rxConf_bAppendTimestamp              5
#define _NBITS_CMD_ANT_RX_rxConf_bAppendTimestamp               1
#define _POSITION_CMD_ANT_RX_networkAddr0                       16
#define _TYPE_CMD_ANT_RX_networkAddr0                           uint16_t
#define _POSITION_CMD_ANT_RX_networkAddr1                       18
#define _TYPE_CMD_ANT_RX_networkAddr1                           uint16_t
#define _POSITION_CMD_ANT_RX_deviceAddr                         20
#define _TYPE_CMD_ANT_RX_deviceAddr                             uint32_t
#define _POSITION_CMD_ANT_RX_pktLen                             24
#define _TYPE_CMD_ANT_RX_pktLen                                 uint8_t
#define _POSITION_CMD_ANT_RX_endTrigger                         27
#define _TYPE_CMD_ANT_RX_endTrigger                             uint8_t
#define _BITPOS_CMD_ANT_RX_endTrigger_triggerType               0
#define _NBITS_CMD_ANT_RX_endTrigger_triggerType                4
#define _BITPOS_CMD_ANT_RX_endTrigger_bEnaCmd                   4
#define _NBITS_CMD_ANT_RX_endTrigger_bEnaCmd                    1
#define _BITPOS_CMD_ANT_RX_endTrigger_triggerNo                 5
#define _NBITS_CMD_ANT_RX_endTrigger_triggerNo                  2
#define _BITPOS_CMD_ANT_RX_endTrigger_pastTrig                  7
#define _NBITS_CMD_ANT_RX_endTrigger_pastTrig                   1
#define _POSITION_CMD_ANT_RX_endTime                            28
#define _TYPE_CMD_ANT_RX_endTime                                ratmr_t
#define _POSITION_CMD_ANT_RX_pQueue                             32
#define _TYPE_CMD_ANT_RX_pQueue                                 dataQueue_t*
#define _POSITION_CMD_ANT_RX_pOutput                            36
#define _TYPE_CMD_ANT_RX_pOutput                                uint8_t*
#define _LAST_POSITION_CMD_ANT_RX                               36
#define _LAST_TYPE_CMD_ANT_RX                                   uint8_t*

typedef struct {
   uint16_t commandNo;
   uint16_t status;
   uint8_t* pNextOp;
   ratmr_t startTime;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } startTrigger;
   struct {
      uint8_t rule:4;
      uint8_t nSkip:4;
   } condition;
   struct {
      uint8_t bFsOff:1;
      uint8_t bWhiten:1;
      uint8_t bRepeatOk:1;
      uint8_t bRepeatNok:1;
      uint8_t networkAddrMode:2;
      uint8_t bCheckDeviceAddr:1;
   } pktConf;
   struct {
      uint8_t bAutoFlushCrcErr:1;
      uint8_t bIncludeNetwAddr:1;
      uint8_t bIncludeCrc:1;
      uint8_t bAppendRssi:1;
      uint8_t bAppendStatus:1;
      uint8_t bAppendTimestamp:1;
   } rxConf;
   uint16_t networkAddr0;
   uint16_t networkAddr1;
   uint32_t deviceAddr;
   uint8_t pktLen;
   uint8_t __dummy0;
   uint8_t __dummy1;
   struct {
      uint8_t triggerType:4;
      uint8_t bEnaCmd:1;
      uint8_t triggerNo:2;
      uint8_t pastTrig:1;
   } endTrigger;
   ratmr_t endTime;
   dataQueue_t* pQueue;
   uint8_t* pOutput;
} rfCoreHal_CMD_ANT_RX_t;

#define _POSITION_antRxOutput_nRxOk                             0
#define _TYPE_antRxOutput_nRxOk                                 uint16_t
#define _POSITION_antRxOutput_nRxNok                            2
#define _TYPE_antRxOutput_nRxNok                                uint16_t
#define _POSITION_antRxOutput_nRxAborted                        4
#define _TYPE_antRxOutput_nRxAborted                            uint16_t
#define _POSITION_antRxOutput_nRxBufFull                        6
#define _TYPE_antRxOutput_nRxBufFull                            uint8_t
#define _POSITION_antRxOutput_lastRssi                          7
#define _TYPE_antRxOutput_lastRssi                              int8_t
#define _POSITION_antRxOutput_timeStamp                         8
#define _TYPE_antRxOutput_timeStamp                             ratmr_t
#define _LAST_POSITION_antRxOutput                              8
#define _LAST_TYPE_antRxOutput                                  ratmr_t

typedef struct {
   uint16_t nRxOk;
   uint16_t nRxNok;
   uint16_t nRxAborted;
   uint8_t nRxBufFull;
   int8_t lastRssi;
   ratmr_t timeStamp;
} rfCoreHal_antRxOutput_t;

#define _POSITION_antRxStatus_status                            0
#define _TYPE_antRxStatus_status                                uint8_t
#define _BITPOS_antRxStatus_status_bCrcErr                      0
#define _NBITS_antRxStatus_status_bCrcErr                       1
#define _BITPOS_antRxStatus_status_addressInd                   1
#define _NBITS_antRxStatus_status_addressInd                    1
#define _LAST_POSITION_antRxStatus                              0
#define _LAST_TYPE_antRxStatus                                  uint8_t

typedef struct {
   struct {
      uint8_t bCrcErr:1;
      uint8_t addressInd:1;
   } status;
} rfCoreHal_antRxStatus_t;

#endif
